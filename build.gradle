/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

javafx {
	modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    javaFXModules = ["base", "controls", "fxml", "swing", "graphics", "media"]
    supportedPlatforms = ["linux", "mac", "win"] // All required for OOP
    jUnitVersion = "5.10.2"
    javaFxVersion = "15"
}

dependencies {

	// Dipendenza per javafx.media
    //implementation 'org.openjfx:javafx-media:$javaFxVersion:$platform'
    
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
    
    // Suppressions for SpotBugs
    compileOnly("com.github.spotbugs:spotbugs-annotations:4.8.3")
    
    // JavaFX: comment out if you do not need them
    for (platform in supportedPlatforms) {
        for (module in javaFXModules) {
        	implementation("org.openjfx:javafx-$module:$javaFxVersion:win")
        }
    }
    
    // JUnit API and testing engine
    testImplementation("org.junit.jupiter:junit-jupiter-api:$jUnitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jUnitVersion")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
tasks.withType(JavaExec) {
   	maxHeapSize = '8g'
}
application {
    mainClass = '_OOP_develop_gradle.model.Main'
}

jar {
	duplicatesStrategy = 'exclude'
	from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes(
            'Main-Class': '_OOP_develop_gradle.model.Main'
        )
    }
}
